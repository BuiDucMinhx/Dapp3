/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FLPCrowdSale,
  FLPCrowdSaleInterface,
} from "../../../contracts/FLPCrowndsale.sol/FLPCrowdSale";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bnb_rate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "usdt_rate",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "icotoken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "BuyTokenByBNB",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "BuyTokenByUSDT",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newRate",
        type: "uint256",
      },
    ],
    name: "SetBNBRate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newRate",
        type: "uint256",
      },
    ],
    name: "SetUSDTRate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "SetUSDTToken",
    type: "event",
  },
  {
    inputs: [],
    name: "BNB_rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDT_rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_wallet",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "buyTokenByBNB",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "USDTAmount",
        type: "uint256",
      },
    ],
    name: "buyTokenByUSDT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "BNBAmount",
        type: "uint256",
      },
    ],
    name: "getTokenAmountBNB",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "USDTAmount",
        type: "uint256",
      },
    ],
    name: "getTokenAmountUSDT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "new_rate",
        type: "uint256",
      },
    ],
    name: "setBNBRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "new_rate",
        type: "uint256",
      },
    ],
    name: "setUSDTRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token_address",
        type: "address",
      },
    ],
    name: "setUSDTToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "usdtToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001d1038038062001d108339818101604052810190620000379190620002bb565b620000576200004b620000f160201b60201c565b620000f960201b60201c565b836002819055508260038190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200032d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620001d781620001c2565b8114620001e357600080fd5b50565b600081519050620001f781620001cc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022a82620001fd565b9050919050565b6200023c816200021d565b81146200024857600080fd5b50565b6000815190506200025c8162000231565b92915050565b60006200026f82620001fd565b9050919050565b6000620002838262000262565b9050919050565b620002958162000276565b8114620002a157600080fd5b50565b600081519050620002b5816200028a565b92915050565b60008060008060808587031215620002d857620002d7620001bd565b5b6000620002e887828801620001e6565b9450506020620002fb87828801620001e6565b93505060406200030e878288016200024b565b92505060606200032187828801620002a4565b91505092959194509250565b6119d3806200033d6000396000f3fe6080604052600436106100f35760003560e01c806366e226bd1161008a578063acb03d4311610059578063acb03d43146102bf578063c5d15651146102fc578063f2fde38b14610325578063fc0c546a1461034e576100f3565b806366e226bd14610229578063715018a6146102525780638da5cb5b14610269578063a98ad46c14610294576100f3565b806331927737116100c657806331927737146101b25780633ccfd60b146101bc578063592a00e4146101d3578063610757e4146101fe576100f3565b8063157fc821146100f85780631832d8b6146101235780631b4622d6146101605780632be8629914610189575b600080fd5b34801561010457600080fd5b5061010d610379565b60405161011a9190610ffb565b60405180910390f35b34801561012f57600080fd5b5061014a60048036038101906101459190611047565b61037f565b6040516101579190610ffb565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190611047565b610396565b005b34801561019557600080fd5b506101b060048036038101906101ab9190611047565b6103df565b005b6101ba610428565b005b3480156101c857600080fd5b506101d1610697565b005b3480156101df57600080fd5b506101e86106e8565b6040516101f59190610ffb565b60405180910390f35b34801561020a57600080fd5b506102136106ee565b60405161022091906110b5565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b9190611120565b610714565b005b34801561025e57600080fd5b50610267610797565b005b34801561027557600080fd5b5061027e6107ab565b60405161028b919061115c565b60405180910390f35b3480156102a057600080fd5b506102a96107d4565b6040516102b691906111d6565b60405180910390f35b3480156102cb57600080fd5b506102e660048036038101906102e19190611047565b6107fa565b6040516102f39190610ffb565b60405180910390f35b34801561030857600080fd5b50610323600480360381019061031e9190611047565b610811565b005b34801561033157600080fd5b5061034c6004803603810190610347919061121d565b610a62565b005b34801561035a57600080fd5b50610363610ae6565b60405161037091906111d6565b60405180910390f35b60025481565b60006003548261038f9190611279565b9050919050565b61039e610b0c565b806003819055507fbdaa37e3f6679857d8c3e80d172bd45af732a8658cf1d690c81ca96f5a443b5b816040516103d49190610ffb565b60405180910390a150565b6103e7610b0c565b806002819055507fb0cc740bbbfcd5af22ee3956c6b44d2d6f499e2a86cb11d915fcce88dca2113a8160405161041d9190610ffb565b60405180910390a150565b60003490506000610438826107fa565b90506000811161047d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047490611330565b60405180910390fd5b80600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104d9919061115c565b60206040518083038186803b1580156104f157600080fd5b505afa158015610505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190611365565b101561056a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610561906113de565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff163110156105c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bb906113de565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561062c573d6000803e3d6000fd5b5061065a600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383610b8a565b7ff695091b71a5c3ea41510251da89a66470bbcf1ee118f820a1bab8739e29ea50338260405161068b9291906113fe565b60405180910390a15050565b61069f610b0c565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156106e5573d6000803e3d6000fd5b50565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61071c610b0c565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f43036333e58a6f9255617b54ec9f5825590c8ee695a222dc35e5001927f071518160405161078c91906111d6565b60405180910390a150565b61079f610b0c565b6107a96000610c10565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002548261080a9190611279565b9050919050565b600061081c8261037f565b9050813373ffffffffffffffffffffffffffffffffffffffff16311015610878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086f90611473565b60405180910390fd5b600081116108bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b2906114df565b60405180910390fd5b80600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610917919061115c565b60206040518083038186803b15801561092f57600080fd5b505afa158015610943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109679190611365565b10156109a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099f9061154b565b60405180910390fd5b6109f8600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685610cd4565b610a25600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383610b8a565b7f5c0161fad3fa89cfebd4a74115d9f81661cdd1b9008d05a238ea9d65088e20643382604051610a569291906113fe565b60405180910390a15050565b610a6a610b0c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad1906115dd565b60405180910390fd5b610ae381610c10565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b14610d5d565b73ffffffffffffffffffffffffffffffffffffffff16610b326107ab565b73ffffffffffffffffffffffffffffffffffffffff1614610b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7f90611649565b60405180910390fd5b565b610c0b8363a9059cbb60e01b8484604051602401610ba99291906113fe565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d65565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610d57846323b872dd60e01b858585604051602401610cf593929190611669565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d65565b50505050565b600033905090565b6000610dc7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610e2c9092919063ffffffff16565b9050600081511115610e275780806020019051810190610de791906116d8565b610e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1d90611777565b60405180910390fd5b5b505050565b6060610e3b8484600085610e44565b90509392505050565b606082471015610e89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8090611809565b60405180910390fd5b610e9285610f58565b610ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec890611875565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610efa919061190f565b60006040518083038185875af1925050503d8060008114610f37576040519150601f19603f3d011682016040523d82523d6000602084013e610f3c565b606091505b5091509150610f4c828286610f7b565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610f8b57829050610fdb565b600083511115610f9e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd2919061197b565b60405180910390fd5b9392505050565b6000819050919050565b610ff581610fe2565b82525050565b60006020820190506110106000830184610fec565b92915050565b600080fd5b61102481610fe2565b811461102f57600080fd5b50565b6000813590506110418161101b565b92915050565b60006020828403121561105d5761105c611016565b5b600061106b84828501611032565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061109f82611074565b9050919050565b6110af81611094565b82525050565b60006020820190506110ca60008301846110a6565b92915050565b60006110db82611074565b9050919050565b60006110ed826110d0565b9050919050565b6110fd816110e2565b811461110857600080fd5b50565b60008135905061111a816110f4565b92915050565b60006020828403121561113657611135611016565b5b60006111448482850161110b565b91505092915050565b611156816110d0565b82525050565b6000602082019050611171600083018461114d565b92915050565b6000819050919050565b600061119c61119761119284611074565b611177565b611074565b9050919050565b60006111ae82611181565b9050919050565b60006111c0826111a3565b9050919050565b6111d0816111b5565b82525050565b60006020820190506111eb60008301846111c7565b92915050565b6111fa816110d0565b811461120557600080fd5b50565b600081359050611217816111f1565b92915050565b60006020828403121561123357611232611016565b5b600061124184828501611208565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061128482610fe2565b915061128f83610fe2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112c8576112c761124a565b5b828202905092915050565b600082825260208201905092915050565b7f616d6f756e74206973207a65726f000000000000000000000000000000000000600082015250565b600061131a600e836112d3565b9150611325826112e4565b602082019050919050565b600060208201905081810360008301526113498161130d565b9050919050565b60008151905061135f8161101b565b92915050565b60006020828403121561137b5761137a611016565b5b600061138984828501611350565b91505092915050565b7f496e73756666696369656e74206163636f756e742062616c616e636500000000600082015250565b60006113c8601c836112d3565b91506113d382611392565b602082019050919050565b600060208201905081810360008301526113f7816113bb565b9050919050565b6000604082019050611413600083018561114d565b6114206020830184610fec565b9392505050565b7f496e737566696369656e74206163636f756e742062616c616e63650000000000600082015250565b600061145d601b836112d3565b915061146882611427565b602082019050919050565b6000602082019050818103600083015261148c81611450565b9050919050565b7f416d6f756e74206973207a65726f000000000000000000000000000000000000600082015250565b60006114c9600e836112d3565b91506114d482611493565b602082019050919050565b600060208201905081810360008301526114f8816114bc565b9050919050565b7f496e7375666669656e74206163636f756e742062616c616e6365000000000000600082015250565b6000611535601a836112d3565b9150611540826114ff565b602082019050919050565b6000602082019050818103600083015261156481611528565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006115c76026836112d3565b91506115d28261156b565b604082019050919050565b600060208201905081810360008301526115f6816115ba565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006116336020836112d3565b915061163e826115fd565b602082019050919050565b6000602082019050818103600083015261166281611626565b9050919050565b600060608201905061167e600083018661114d565b61168b602083018561114d565b6116986040830184610fec565b949350505050565b60008115159050919050565b6116b5816116a0565b81146116c057600080fd5b50565b6000815190506116d2816116ac565b92915050565b6000602082840312156116ee576116ed611016565b5b60006116fc848285016116c3565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611761602a836112d3565b915061176c82611705565b604082019050919050565b6000602082019050818103600083015261179081611754565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006117f36026836112d3565b91506117fe82611797565b604082019050919050565b60006020820190508181036000830152611822816117e6565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061185f601d836112d3565b915061186a82611829565b602082019050919050565b6000602082019050818103600083015261188e81611852565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156118c95780820151818401526020810190506118ae565b838111156118d8576000848401525b50505050565b60006118e982611895565b6118f381856118a0565b93506119038185602086016118ab565b80840191505092915050565b600061191b82846118de565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061194d82611926565b61195781856112d3565b93506119678185602086016118ab565b61197081611931565b840191505092915050565b600060208201905081810360008301526119958184611942565b90509291505056fea264697066735822122095b78a2e3a64ac6b70ecb5589888c5f8b3cc5a1b8e1cbd858d46032164ab0b6f64736f6c63430008090033";

type FLPCrowdSaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FLPCrowdSaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FLPCrowdSale__factory extends ContractFactory {
  constructor(...args: FLPCrowdSaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    bnb_rate: PromiseOrValue<BigNumberish>,
    usdt_rate: PromiseOrValue<BigNumberish>,
    wallet: PromiseOrValue<string>,
    icotoken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FLPCrowdSale> {
    return super.deploy(
      bnb_rate,
      usdt_rate,
      wallet,
      icotoken,
      overrides || {}
    ) as Promise<FLPCrowdSale>;
  }
  override getDeployTransaction(
    bnb_rate: PromiseOrValue<BigNumberish>,
    usdt_rate: PromiseOrValue<BigNumberish>,
    wallet: PromiseOrValue<string>,
    icotoken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      bnb_rate,
      usdt_rate,
      wallet,
      icotoken,
      overrides || {}
    );
  }
  override attach(address: string): FLPCrowdSale {
    return super.attach(address) as FLPCrowdSale;
  }
  override connect(signer: Signer): FLPCrowdSale__factory {
    return super.connect(signer) as FLPCrowdSale__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FLPCrowdSaleInterface {
    return new utils.Interface(_abi) as FLPCrowdSaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FLPCrowdSale {
    return new Contract(address, _abi, signerOrProvider) as FLPCrowdSale;
  }
}
